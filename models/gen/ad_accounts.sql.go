// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ad_accounts.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAdAccount = `-- name: CreateAdAccount :one
INSERT INTO ad_accounts (
    platform_account_id,
    name,
    platform_type,
    credentials,
    status,
    owner_user_id,
    additional_config
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at
`

type CreateAdAccountParams struct {
	PlatformAccountID string
	Name              string
	PlatformType      PlatformTypeEnum
	Credentials       string
	Status            AccountStatusEnum
	OwnerUserID       pgtype.UUID
	AdditionalConfig  []byte
}

func (q *Queries) CreateAdAccount(ctx context.Context, arg CreateAdAccountParams) (AdAccount, error) {
	row := q.db.QueryRow(ctx, createAdAccount,
		arg.PlatformAccountID,
		arg.Name,
		arg.PlatformType,
		arg.Credentials,
		arg.Status,
		arg.OwnerUserID,
		arg.AdditionalConfig,
	)
	var i AdAccount
	err := row.Scan(
		&i.ID,
		&i.PlatformAccountID,
		&i.Name,
		&i.PlatformType,
		&i.Credentials,
		&i.Status,
		&i.OwnerUserID,
		&i.AdditionalConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAdAccountByID = `-- name: GetAdAccountByID :one
SELECT id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at FROM ad_accounts
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetAdAccountByID(ctx context.Context, id uuid.UUID) (AdAccount, error) {
	row := q.db.QueryRow(ctx, getAdAccountByID, id)
	var i AdAccount
	err := row.Scan(
		&i.ID,
		&i.PlatformAccountID,
		&i.Name,
		&i.PlatformType,
		&i.Credentials,
		&i.Status,
		&i.OwnerUserID,
		&i.AdditionalConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAdAccountByIDIncludingDeleted = `-- name: GetAdAccountByIDIncludingDeleted :one
SELECT id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at FROM ad_accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAdAccountByIDIncludingDeleted(ctx context.Context, id uuid.UUID) (AdAccount, error) {
	row := q.db.QueryRow(ctx, getAdAccountByIDIncludingDeleted, id)
	var i AdAccount
	err := row.Scan(
		&i.ID,
		&i.PlatformAccountID,
		&i.Name,
		&i.PlatformType,
		&i.Credentials,
		&i.Status,
		&i.OwnerUserID,
		&i.AdditionalConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAdAccountByPlatformAccountID = `-- name: GetAdAccountByPlatformAccountID :one
SELECT id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at FROM ad_accounts
WHERE platform_account_id = $1 AND platform_type = $2 AND deleted_at IS NULL
LIMIT 1
`

type GetAdAccountByPlatformAccountIDParams struct {
	PlatformAccountID string
	PlatformType      PlatformTypeEnum
}

func (q *Queries) GetAdAccountByPlatformAccountID(ctx context.Context, arg GetAdAccountByPlatformAccountIDParams) (AdAccount, error) {
	row := q.db.QueryRow(ctx, getAdAccountByPlatformAccountID, arg.PlatformAccountID, arg.PlatformType)
	var i AdAccount
	err := row.Scan(
		&i.ID,
		&i.PlatformAccountID,
		&i.Name,
		&i.PlatformType,
		&i.Credentials,
		&i.Status,
		&i.OwnerUserID,
		&i.AdditionalConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAdAccounts = `-- name: ListAdAccounts :many
SELECT id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at FROM ad_accounts
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAdAccountsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListAdAccounts(ctx context.Context, arg ListAdAccountsParams) ([]AdAccount, error) {
	rows, err := q.db.Query(ctx, listAdAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdAccount
	for rows.Next() {
		var i AdAccount
		if err := rows.Scan(
			&i.ID,
			&i.PlatformAccountID,
			&i.Name,
			&i.PlatformType,
			&i.Credentials,
			&i.Status,
			&i.OwnerUserID,
			&i.AdditionalConfig,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdAccountsIncludingDeleted = `-- name: ListAdAccountsIncludingDeleted :many
SELECT id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at FROM ad_accounts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAdAccountsIncludingDeletedParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListAdAccountsIncludingDeleted(ctx context.Context, arg ListAdAccountsIncludingDeletedParams) ([]AdAccount, error) {
	rows, err := q.db.Query(ctx, listAdAccountsIncludingDeleted, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdAccount
	for rows.Next() {
		var i AdAccount
		if err := rows.Scan(
			&i.ID,
			&i.PlatformAccountID,
			&i.Name,
			&i.PlatformType,
			&i.Credentials,
			&i.Status,
			&i.OwnerUserID,
			&i.AdditionalConfig,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAdAccount = `-- name: SoftDeleteAdAccount :exec
UPDATE ad_accounts
SET deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteAdAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteAdAccount, id)
	return err
}

const updateAdAccount = `-- name: UpdateAdAccount :one
UPDATE ad_accounts
SET
    name = COALESCE($1, name),
    platform_type = COALESCE($2, platform_type),
    credentials = COALESCE($3, credentials),
    status = COALESCE($4, status),
    owner_user_id = COALESCE($5, owner_user_id),
    additional_config = COALESCE($6, additional_config),
    updated_at = NOW()
WHERE id = $7 AND deleted_at IS NULL
RETURNING id, platform_account_id, name, platform_type, credentials, status, owner_user_id, additional_config, created_at, updated_at, deleted_at
`

type UpdateAdAccountParams struct {
	Name             pgtype.Text
	PlatformType     NullPlatformTypeEnum
	Credentials      pgtype.Text
	Status           NullAccountStatusEnum
	OwnerUserID      pgtype.UUID
	AdditionalConfig []byte
	ID               uuid.UUID
}

func (q *Queries) UpdateAdAccount(ctx context.Context, arg UpdateAdAccountParams) (AdAccount, error) {
	row := q.db.QueryRow(ctx, updateAdAccount,
		arg.Name,
		arg.PlatformType,
		arg.Credentials,
		arg.Status,
		arg.OwnerUserID,
		arg.AdditionalConfig,
		arg.ID,
	)
	var i AdAccount
	err := row.Scan(
		&i.ID,
		&i.PlatformAccountID,
		&i.Name,
		&i.PlatformType,
		&i.Credentials,
		&i.Status,
		&i.OwnerUserID,
		&i.AdditionalConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
