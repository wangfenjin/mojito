// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public."user" (
    id,
    email,
    hashed_password,
    is_active,
    is_superuser,
    full_name
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, email, hashed_password, is_active, is_superuser, full_name, created_at, updated_at
`

type CreateUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	IsActive       bool
	IsSuperuser    bool
	FullName       pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.IsActive,
		arg.IsSuperuser,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsSuperuser,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE public."user" SET
    is_active = false
WHERE id = $1
RETURNING id, email, hashed_password, is_active, is_superuser, full_name, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, hashed_password, is_active, is_superuser, full_name, created_at, updated_at FROM public."user" WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsSuperuser,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, hashed_password, is_active, is_superuser, full_name, created_at, updated_at FROM public."user" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsSuperuser,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isUserEmailExists = `-- name: IsUserEmailExists :one
SELECT EXISTS (
    SELECT 1 
    FROM public."user" 
    WHERE email = $1
) AS email_exists
`

func (q *Queries) IsUserEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserEmailExists, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, hashed_password, is_active, is_superuser, full_name, created_at, updated_at FROM public."user" 
ORDER BY email
LIMIT $1 
OFFSET $2
`

type ListUsersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.HashedPassword,
			&i.IsActive,
			&i.IsSuperuser,
			&i.FullName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE public."user" SET
    email = COALESCE($2, email),
    full_name = COALESCE($3, full_name),
    is_active = COALESCE($4, is_active),
    is_superuser = COALESCE($5, is_superuser),
    hashed_password = COALESCE($6, hashed_password)
WHERE id = $1
RETURNING id, email, hashed_password, is_active, is_superuser, full_name, created_at, updated_at
`

type UpdateUserParams struct {
	ID             uuid.UUID
	Email          string
	FullName       pgtype.Text
	IsActive       bool
	IsSuperuser    bool
	HashedPassword string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.IsActive,
		arg.IsSuperuser,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsSuperuser,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
